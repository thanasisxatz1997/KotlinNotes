KOTLIN NOTES
_____________________________________________________________
OPERATORS

||
&&
!
_____________________________________________________________
STRINGS

var tempStr="This is a string"
var tempStr2="This is a second temporary str"
tempStr.uppercase()
tempStr.lowercase()
println(tempStr + "We can combine (concatinate) strings")
var t3=tempStr + tempStr2
_____________________________________________________________

If statements


if(true){
}
else if(true){
}
else{
}

_____________________________________________________________

User Input (readln)

var inputValue=readln()
var convertedVal=inputValue.toInt()
var inp=readln().toInt()

_____________________________________________________________

Random numbers

val randomNumber=(1..3).random()

_____________________________________________________________

When

var randomNumber=(1..3).random()
    computerChoice=when(randomNumber){
        1 -> "Rock"
        2 -> "Paper"
        3 -> "Scizors"
    }

val output=when{
        playerChoice==computerChoice-> "Tie"
        playerChoice=="Rock" && computerChoice =="Paper" ->"Comp won"
        playerChoice=="Rock" && computerChoice =="Scissors" ->"Player won"
        playerChoice=="Paper" && computerChoice =="Scissors" ->"Comp won"
        playerChoice=="Paper" && computerChoice =="Rock" ->"Player won"
        playerChoice=="Scissors" && computerChoice =="Rock" ->"Comp won"
        playerChoice=="Scissors" && computerChoice =="Paper" ->"Player won"
        else -> "Error"
    }

_____________________________________________________________

While loop

var count=0
while(count<3)
{
	count++
	println("Count is $count")
}
_____________________________________________________________

functions

fun functionName( num : Int){
	println(num)
	return num+3
}

fun divide(num1:Int,num2:Int):Double{
	return num1/num2.toDouble()
}

_____________________________________________________________

Map,Copy

Map
//Map transforms a list of items by iterating through
val numbers=listOf(1,2,3)
val doubled=numbers.map{ it * 2 } //2,4,6

Copy

//The bellow lines of code will first create an object of data class Vase with blue color and Rose design
//Then creates another object by copying the first, changing the value of one of the properties and keeping the value of the others.
val blueRoseVase=Vase(color = "Blue" , design = "Rose") //Vase(color=Blue,design=Rose)
val redRoseVase=blueRoseVase.copy(color="Red") //Vase(color=Red,design=Rose)

data class Vase(val color:String,val design:String)

_____________________________________________________________

let

//let allows you to use and transform an object without a confined scope wthout affecting the original object
//String? means we have a string that can have the value of null (nullable)

val name:String?="Ella"
name?.let{
    println(it.toUpperCase())
}
_____________________________________________________________

Lambda Expressions

//In this example we create a lambda expression called doubleNumber that accepts an (Int) input and it doubles it and returns the Int result
//the it keyword refers to the input that we gave 
val doubleNumber:(Int) -> Int = {it*2}
Text(doubleNumber(5).toString())
//The above Text component will display 10

//Here is an example of passing lambda expressions as a parameter in a composable
//In this example the lambda expression receives no input ()
@Composable
fun ShoppingListItem(
    item:ShoppingItem,
    onEditClick:()->Unit,
    onDeleteClick:()->Unit,
){
    IconButton(onClick = {onEditClick}) {
                
            }
}

_____________________________________________________________



Classes

//When creating a class objects we can pass in both properties and parameters

class Dog (val name:String, val breed:String, var age:Int) {
    init {
        bark()
    }
    fun bark(){
        println("Woof")
    }
}

var daisy=Dog("Daisy","Dwarf poodle",3)
println(daisy.breed)
daisy.age=4


_____________________________________________________________

Data Classes

data class CoffeeDetails(
    val sugarCount:Int,
    val name:String,
    val size:String,
    val creamAmmount:Int
    ){
}


fun main(){
    val coffeeForDenis=CoffeeDetails(0,"denis","xxl",0)
    makeCoffee(coffeeForDenis)
}

fun makeCoffee(coffeeDetails: CoffeeDetails){
    println("${coffeeDetails.name} wants ${coffeeDetails.sugarCount} sugar, ${coffeeDetails.size} size coffee and ${coffeeDetails.creamAmmount} cream")
}


_____________________________________________________________


Lists

//immutable list
//val immutableShoppingList= listOf("Processor","RAM","Graphics Card","SSD")
//mutable list
val shoppingList= mutableListOf("Processor","RAM","Graphics Card RTX 3060","SSD")
shoppingList.add("Cooling System")
println(shoppingList.size) //.size returns the size of our list
//shoppingList.removeAt(2) another way to remove, can also use removeFirst and removeLast
shoppingList.remove("Graphics Card RTX 3060")
shoppingList.add("Graphics Card RTX 4090")
shoppingList.removeAt(2)
shoppingList.removeAt(1)
shoppingList.add(2,"RAM")
print(shoppingList[2])
println(shoppingList)
shoppingList[3]="Graphics Card RX 7800XT"
println(shoppingList)
//set function replaces a list item at the specified index
shoppingList.set(1, "Water Cooling")
println(shoppingList)
// .contains return true if the list contains the item or false if it doesnt
val hasRam=shoppingList.contains("RAM")
if (hasRam){
    println("Has RAM in the list")
}
else{
    println("No RAM in the list")
}
var fruitList= mutableListOf<String>()
fruitList.add("Apple")
fruitList.add("Orange")
fruitList.remove("Apple")
println(fruitList.contains("Apple")) //false

_____________________________________________________________

For loop

for (item in shoppingList){
        println(item)
        if(item=="RAM"){
            break
        }
    }
    println(shoppingList.size)
    for (item in 0 until shoppingList.size){
        println(item) //here we get the indexes of the items 0,1,2,3 NOT THE ACTUAL ITEM
        println("Item at $item : ${shoppingList[item]}")
    }
    // .. is same as until but it also includes the last number(<=)
    for(index in 0..4){
        println(index) //0,1,2,3,4
    }

_____________________________________________________________

Components

TextField
BasicTextField
OutlinedTextField
Button


_____________________________________________________________


Toast

Toast.makeText(context,"Thanks for clicking!",Toast.LENGTH_LONG).show()


_____________________________________________________________


Context

//Get current context
val context= LocalContext.current

_____________________________________________________________

Layout

Column(){}
// Here all the UI elements will be stacked below each other

Row(){}
//Here all the UI elements will be stacked next to each other

Box(){}
//A layout element like row or column that enables you to create custom layouts 
//It aranges and stacks composables on top of each other
//for example a dropdown menu requires a parent that will help position it on the screen
//in a dropdown menu each selector will have its own box that will be shown when triggered

DropDownMenu
//A compose component that acts like a menu and can display a list of choice using its Child Element dropdown menu item.
//A container for it could be a box element and a trigger for it could be the button onClick event

DropdownMenu(expanded = false, onDismissRequest = { /*TODO*/ }) {

}
//expanded=false means that at start our drop down menu will not be expanded
//on onDismissRequest is what we want to happen when we close the menu

DropDownMenuItem

//A component that will be inside our dropdown menu
DropdownMenuItem(onClick = { /*TODO*/ }) {
    Text("Centimeters")
}
_____________________________________________________________


Modifiers, Vertical Arrangement/Alignment, Horisontal Alignment

//Customize the allignment of our elements
//Modifier.fillMaxSize() fills the max size that IT REQUIRES
Column(
        modifier=Modifier.fillMaxSize(),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ){}

Padding, Spacer element

//We can use a padding modifier to add padding arround our elements
//We can use the spacer element to create consistent spacing between multiple elements without applying the modifier to each one seperately
//Spacer is a bit more complex, what to use depends on specific needs
//Normaly we use padding modifiers for fine control around single elements
//And we use Spacers for uniform spacing among multiple components. A cleaner more reusable solution

Spacer(modifier = Modifier.height(16.dp)) //Here we create a spacer with a height of 16 dp 

//dp depends on the density of pixel so it is a relative pixel value.
//we can reuse that spacer whereever we wanted

//If we wanted to use padding instead this is how to do it
//We would have to apply it to each component
Text("Unit Converter",modifier=Modifier.padding(16.dp))

//we can also chain modifiers and add one after the other.
modifier=Modifier.fillMaxSize().padding(16.dp)
_____________________________________________________________

State

There are 2 consepts that are essential in maintaining an update in
the state of your composable 

Remember function
used to create a persistent and remembered state in jetpack compose
it allows a composable to maintain its state accross recompositions
even when a composable is recreated(screen is refreshed)
crucial for preventing data and ui states during the lifecycle of our app

recomposition is hte process of regenerating and updating the ui to
reflect changes in the application state or user interactions
In jetpack compose the ui is represented as a tree of composables.
And recomposition is how compose updates this tree efficiently
when underlying data or conditions change

mutable state property delegate
use to create mutable state that can be updated, used
in conjuction with remember to manage changing data

remember and mutable state work together where the first
creates a state that persists across recomposition
assuring data is retained even when the component is rerendered
and the latter enables you to update the states value
when you change the value it triggers recomposition of the composable
reflexting the updating state in the ui


remember usage

val treasuresFound=remember{mutableStateOf(0)}
val direction=remember{mutableStateOf("North")}

getting value from a mutable state

Text(text = "Treasures Found: ${treasuresFound.value}")


updating a value through a button
Button(onClick = {
                direction.value="East"
                if(Random.nextBoolean()){
                    //this is a 50/50 randomizer
                    treasuresFound.value+=1
                }
            }) {
                Text("Sail East")
            }

My custom button component

@Composable
fun CustomDirButton(direction:MutableState<String>, treasuresFound:MutableState<Int>, stormOrTreasure:MutableState<String>, buttonDir:String){
    var customButton=Button(onClick = {
        direction.value="$buttonDir"
        if(Random.nextBoolean()){
            //this is a 50/50 randomizer
            treasuresFound.value+=1
            stormOrTreasure.value="Treasure"
        }
        else
        {
            stormOrTreasure.value="Storm"
        }
    }) {
        Text("Sail $buttonDir")
    }
    return customButton
}

usage

val treasuresFound=remember{mutableStateOf(0)}
        val direction=remember{mutableStateOf("North")}
        val stormOrTreasure= remember { mutableStateOf("") }
        Column() {
            Text(text = "Treasures Found: ${treasuresFound.value}")
            Text(text = "Treasures Found: ${direction.value}")
            CustomDirButton(direction = direction, treasuresFound = treasuresFound, stormOrTreasure = stormOrTreasure, buttonDir = "East")
            CustomDirButton(direction = direction, treasuresFound = treasuresFound, stormOrTreasure = stormOrTreasure, buttonDir = "West")
            CustomDirButton(direction = direction, treasuresFound = treasuresFound, stormOrTreasure = stormOrTreasure, buttonDir = "North")
            CustomDirButton(direction = direction, treasuresFound = treasuresFound, stormOrTreasure = stormOrTreasure, buttonDir = "South")
            Text(text = stormOrTreasure.value)
        }

_____________________________________________________________

Controlled components

var inputValue by remember { mutableStateOf("") }
OutlinedTextField(value = inputValue, onValueChange = {
    //Here goes what should happen when the value of our outlined textfield changes
    inputValue=it
})

_____________________________________________________________

Null Safe

//We use the elvis operator, in case our value is null it will return 0.0

val inputValueDouble=inputValue.toDoubleOrNull() ?:0.0    

//Another example
Button(onClick = {
            isEditing=false
            eonEditComplete(editedName,editedQuantity.toIntOrNull() ?:1)
        }) {
            Text(text = "Save")
        }

_____________________________________________________________

Round

val result =(inputValueDouble * conversionFactor.value * 100).roundToInt()/100

_____________________________________________________________

Styling Text

//we can either change the style directly
Text("Unit Converter",modifier=Modifier.padding(16.dp),style=MaterialTheme.typography.h3)


//Or we can create a custom style variable with all the propertes we want
val customTextStyle=androidx.compose.ui.text.TextStyle(
        fontFamily = FontFamily.Default,
        fontSize = 16.sp, //sp is similar to dp but for font
        color= androidx.compose.ui.graphics.Color.Red
    )

Text("Unit Converter",modifier=Modifier.padding(16.dp),style=customTextStyle)


_____________________________________________________________

Lazy Column (Displaying long Lists without overwelming the system) (List Composable)

//Only renders the list items visible on the screen
//As the user scrolls new items are composed and off screen items are discarded

var sItems by remember { mutableStateOf(listOf<ShoppingItem>()) }
LazyColumn(modifier= Modifier.fillMaxSize().padding(16.dp)){
    items(sItems){

    }
}

_____________________________________________________________

onDismissRequest property

//What will happend when the user focuses on another component, (when the component is dismissed)

_____________________________________________________________

AlertDialog Component

//Component used to display alerts

AlertDialog(onDismissRequest = { showDialog=false }, confirmButton = {}, title = { Text(text = "Add Shopping Item!")}, text = {
    //we can use any kind of composables in here
    Column() {
        OutlinedTextField(value =itemName, onValueChange = {itemName=it} )           
    }
})

_____________________________________________________________


Composable with parameters

@Composable
fun ShoppingListItem(
    item:ShoppingItem,
    onEditClick:()->Unit,
    onDeleteClick:()->Unit,
    
){

}


_____________________________________________________________

Border

//Adding a border to a composable

Row(modifier = Modifier.padding(8.dp).fillMaxWidth().border(
        border= BorderStroke(2.dp, Color(0XFF018786)),
        shape= RoundedCornerShape(20)
    )){
        
    }

_____________________________________________________________

List of items in a composable

//Displaying a list of items in a composable (ex a Lazy Column)
//We can achieve that using items() LazyListScope function

items(sItems){
    ShoppingListItem(item = it, onEditClick = {}, onDeleteClick = {})
}

_____________________________________________________________

IconButton Composable

//Composable that creates a button containing an icon

IconButton(onClick = {onEditClick}) {
    Icon(imageVector = Icons.Default.Edit, contentDescription = null)
}

_____________________________________________________________

wrap content size

//Enables a component to ONLY take the space that it really needs

BasicTextField(
    value = editedName,
    onValueChange = {editedName=it},
    singleLine=true,
    modifier=Modifier.wrapContentSize().padding(8.dp)
)

_____________________________________________________________

Replacing it

//We can replace the it with another variable name by using -> 

LazyColumn(
            modifier= Modifier
                .fillMaxSize()
                .padding(16.dp)
        ){
            items(sItems){
            item ->
            if(item.isEditing){

            }
        }
    }

_____________________________________________________________


Find an item in a list using the find function

the find funtrion enables us to find an item inside of a list
val editedItem=sItems.find{it.id==item.id}

_____________________________________________________________

How to modify/edit items inside a list when we dont know wich item we are modifying

// for example here we edit a list item through a composable

items(sItems){
                item ->
                if(item.isEditing){
                    ShoppingItemEditor(item = item, onEditComplete = {
                        editedName, editedQuantity ->
                        sItems=sItems.map { it.copy(isEditing = false) }
                        val editedItem=sItems.find{it.id==item.id}
                        editedItem?.let{
                            it.name=editedName
                            it.quantity=editedQuantity
                        }
                    })
                }else
                {
                    ShoppingListItem(item = item, onEditClick = {
                        sItems=sItems.map{it.copy(isEditing = it.id==item.id)}
                    }) {}
                }
            }

_____________________________________________________________

Find out wich list item is being clicked

ShoppingListItem(item = item, onEditClick = {
    sItems=sItems.map{it.copy(isEditing = it.id==item.id)}})


_____________________________________________________________

Custom View Model class

//This is our View Model (VM)
class CounterViewModel : ViewModel() {
    private val _count = mutableStateOf(0)
    val count : MutableState<Int> =_count

    fun increment(){
        _count.value++
    }
    fun decrement(){
        _count.value--
    }
}

//This is the V (View) in MVVM
@Composable
fun CounterApp(viewModel: CounterViewModel){
    Column(
        modifier = Modifier.fillMaxSize(),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(text = "Counter: ${viewModel.count.value}", fontSize = 24.sp, fontWeight = FontWeight.Bold)
        Spacer(modifier = Modifier.height(16.dp))
        Row (
        ){
            Button(onClick = { viewModel.increment() }) {
                Text(text = "Increment")
            }
            Button(onClick = { viewModel.decrement() }) {
                Text(text = "Decrement")
            }
        }
    }
}

Usage in MainActivity

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            var viewModel:CounterViewModel=viewModel()
            ShoppingListAppTheme {
                // A surface container using the 'background' color from the theme
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colors.background
                ) {
                    CounterApp(viewModel)
                }
            }
        }
    }
}

OLDER VERSION VIEW MODEL IN MainActivity

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            val viewModel:CounterViewModel by viewModels()
            CounterMVVMTheme {
                // A surface container using the 'background' color from the theme
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colors.background
                ) {
                    CounterApp(viewModel)
                }
            }
        }
    }
}

_____________________________________________________________

